/*
Timeweb Cloud API

Testing SSHAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_SSHAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SSHAPIService AddKeyToServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId int32

		httpRes, err := apiClient.SSHAPI.AddKeyToServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHAPIService CreateKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SSHAPI.CreateKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHAPIService DeleteKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sshKeyId int32

		httpRes, err := apiClient.SSHAPI.DeleteKey(context.Background(), sshKeyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHAPIService DeleteKeyFromServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId int32
		var sshKeyId int32

		httpRes, err := apiClient.SSHAPI.DeleteKeyFromServer(context.Background(), serverId, sshKeyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHAPIService GetKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sshKeyId int32

		resp, httpRes, err := apiClient.SSHAPI.GetKey(context.Background(), sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHAPIService GetKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SSHAPI.GetKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHAPIService UpdateKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var sshKeyId int32

		resp, httpRes, err := apiClient.SSHAPI.UpdateKey(context.Background(), sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
