/*
Timeweb Cloud API

Testing DatabasesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_DatabasesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DatabasesAPIService CreateDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.CreateDatabase(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService CreateDatabaseBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.CreateDatabaseBackup(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService CreateDatabaseCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.CreateDatabaseCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService CreateDatabaseInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.CreateDatabaseInstance(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService CreateDatabaseUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.CreateDatabaseUser(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService DeleteDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.DeleteDatabase(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService DeleteDatabaseBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32
		var backupId int32

		httpRes, err := apiClient.DatabasesAPI.DeleteDatabaseBackup(context.Background(), dbId, backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService DeleteDatabaseCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.DeleteDatabaseCluster(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService DeleteDatabaseInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32
		var instanceId int32

		httpRes, err := apiClient.DatabasesAPI.DeleteDatabaseInstance(context.Background(), dbClusterId, instanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService DeleteDatabaseUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32
		var adminId int32

		httpRes, err := apiClient.DatabasesAPI.DeleteDatabaseUser(context.Background(), dbClusterId, adminId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabase(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseAutoBackupsSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseAutoBackupsSettings(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32
		var backupId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseBackup(context.Background(), dbId, backupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseBackups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseBackups(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseCluster(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseClusterTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseClusterTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32
		var instanceId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseInstance(context.Background(), dbClusterId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseInstances(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32
		var adminId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseUser(context.Background(), dbClusterId, adminId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabaseUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabaseUsers(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService GetDatabasesPresets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabasesAPI.GetDatabasesPresets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService RestoreDatabaseFromBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32
		var backupId int32

		httpRes, err := apiClient.DatabasesAPI.RestoreDatabaseFromBackup(context.Background(), dbId, backupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService UpdateDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.UpdateDatabase(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService UpdateDatabaseAutoBackupsSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbId int32

		resp, httpRes, err := apiClient.DatabasesAPI.UpdateDatabaseAutoBackupsSettings(context.Background(), dbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService UpdateDatabaseCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.UpdateDatabaseCluster(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService UpdateDatabaseInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32

		resp, httpRes, err := apiClient.DatabasesAPI.UpdateDatabaseInstance(context.Background(), dbClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesAPIService UpdateDatabaseUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dbClusterId int32
		var adminId int32

		resp, httpRes, err := apiClient.DatabasesAPI.UpdateDatabaseUser(context.Background(), dbClusterId, adminId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
