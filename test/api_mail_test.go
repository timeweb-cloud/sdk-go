/*
Timeweb Cloud API

Testing MailAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_MailAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MailAPIService CreateDomainMailbox", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string

		resp, httpRes, err := apiClient.MailAPI.CreateDomainMailbox(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService DeleteMailbox", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string
		var mailbox string

		httpRes, err := apiClient.MailAPI.DeleteMailbox(context.Background(), domain, mailbox).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetDomainMailInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string

		resp, httpRes, err := apiClient.MailAPI.GetDomainMailInfo(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetDomainMailboxes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string

		resp, httpRes, err := apiClient.MailAPI.GetDomainMailboxes(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetMailQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MailAPI.GetMailQuota(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetMailbox", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string
		var mailbox string

		resp, httpRes, err := apiClient.MailAPI.GetMailbox(context.Background(), domain, mailbox).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetMailboxes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MailAPI.GetMailboxes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService UpdateDomainMailInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string

		resp, httpRes, err := apiClient.MailAPI.UpdateDomainMailInfo(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService UpdateMailQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MailAPI.UpdateMailQuota(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService UpdateMailbox", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var domain string
		var mailbox string

		resp, httpRes, err := apiClient.MailAPI.UpdateMailbox(context.Background(), domain, mailbox).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
