/*
Timeweb Cloud API

Testing S3APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_S3APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test S3APIService AddStorageSubdomainCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.S3API.AddStorageSubdomainCertificate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService AddStorageSubdomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int32

		resp, httpRes, err := apiClient.S3API.AddStorageSubdomains(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService CreateStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3API.CreateStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService DeleteStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int32

		resp, httpRes, err := apiClient.S3API.DeleteStorage(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService DeleteStorageSubdomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int32

		resp, httpRes, err := apiClient.S3API.DeleteStorageSubdomains(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService GetStorageSubdomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int32

		resp, httpRes, err := apiClient.S3API.GetStorageSubdomains(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService GetStorageTransferStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int32

		resp, httpRes, err := apiClient.S3API.GetStorageTransferStatus(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService GetStorageUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3API.GetStorageUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService GetStorages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3API.GetStorages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService GetStoragesPresets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3API.GetStoragesPresets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService TransferStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.S3API.TransferStorage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService UpdateStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int32

		resp, httpRes, err := apiClient.S3API.UpdateStorage(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3APIService UpdateStorageUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId int32

		resp, httpRes, err := apiClient.S3API.UpdateStorageUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
