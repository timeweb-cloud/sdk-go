/*
Timeweb Cloud API

Testing NetworkDrivesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_NetworkDrivesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworkDrivesAPIService CreateNetworkDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDrivesAPI.CreateNetworkDrive(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService DeleteNetworkDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDriveId string

		httpRes, err := apiClient.NetworkDrivesAPI.DeleteNetworkDrive(context.Background(), networkDriveId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService GetNetworkDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDriveId string

		resp, httpRes, err := apiClient.NetworkDrivesAPI.GetNetworkDrive(context.Background(), networkDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService GetNetworkDrives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDrivesAPI.GetNetworkDrives(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService GetNetworkDrivesAvailableResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDrivesAPI.GetNetworkDrivesAvailableResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService GetNetworkDrivesPresets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDrivesAPI.GetNetworkDrivesPresets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService MountNetworkDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDriveId string

		httpRes, err := apiClient.NetworkDrivesAPI.MountNetworkDrive(context.Background(), networkDriveId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService UnmountNetworkDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDriveId string

		httpRes, err := apiClient.NetworkDrivesAPI.UnmountNetworkDrive(context.Background(), networkDriveId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDrivesAPIService UpdateNetworkDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDriveId string

		resp, httpRes, err := apiClient.NetworkDrivesAPI.UpdateNetworkDrive(context.Background(), networkDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
