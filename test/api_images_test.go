/*
Timeweb Cloud API

Testing ImagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_ImagesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ImagesAPIService CreateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ImagesAPI.CreateImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService CreateImageDownloadUrl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImagesAPI.CreateImageDownloadUrl(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService DeleteImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		httpRes, err := apiClient.ImagesAPI.DeleteImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService DeleteImageDownloadURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string
		var imageUrlId string

		httpRes, err := apiClient.ImagesAPI.DeleteImageDownloadURL(context.Background(), imageId, imageUrlId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService GetImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImagesAPI.GetImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService GetImageDownloadURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string
		var imageUrlId string

		resp, httpRes, err := apiClient.ImagesAPI.GetImageDownloadURL(context.Background(), imageId, imageUrlId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService GetImageDownloadURLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImagesAPI.GetImageDownloadURLs(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService GetImages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ImagesAPI.GetImages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService UpdateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImagesAPI.UpdateImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesAPIService UploadImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var imageId string

		resp, httpRes, err := apiClient.ImagesAPI.UploadImage(context.Background(), imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
