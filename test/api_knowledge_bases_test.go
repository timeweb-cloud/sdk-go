/*
Timeweb Cloud API

Testing KnowledgeBasesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_KnowledgeBasesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KnowledgeBasesAPIService AddAdditionalTokenPackageToKnowledgebase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.KnowledgeBasesAPI.AddAdditionalTokenPackageToKnowledgebase(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService CreateKnowledgebase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.CreateKnowledgebase(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService DeleteDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var documentId int32

		httpRes, err := apiClient.KnowledgeBasesAPI.DeleteDocument(context.Background(), id, documentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService DeleteKnowledgebase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.KnowledgeBasesAPI.DeleteKnowledgebase(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService DownloadDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var documentId int32

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.DownloadDocument(context.Background(), id, documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService GetKnowledgebase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.GetKnowledgebase(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService GetKnowledgebaseDocumentsV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.GetKnowledgebaseDocumentsV2(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService GetKnowledgebaseStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.GetKnowledgebaseStatistics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService GetKnowledgebases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.GetKnowledgebases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService GetKnowledgebasesV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.GetKnowledgebasesV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService LinkKnowledgebaseToAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var agentId int32

		httpRes, err := apiClient.KnowledgeBasesAPI.LinkKnowledgebaseToAgent(context.Background(), id, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService ReindexDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var documentId int32

		httpRes, err := apiClient.KnowledgeBasesAPI.ReindexDocument(context.Background(), id, documentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService UnlinkKnowledgebaseFromAgent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var agentId int32

		httpRes, err := apiClient.KnowledgeBasesAPI.UnlinkKnowledgebaseFromAgent(context.Background(), id, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService UpdateKnowledgebase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.UpdateKnowledgebase(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeBasesAPIService UploadFilesToKnowledgebase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.KnowledgeBasesAPI.UploadFilesToKnowledgebase(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
