/*
Timeweb Cloud API

Testing FirewallAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_FirewallAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FirewallAPIService AddResourceToGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string
		var resourceId string

		resp, httpRes, err := apiClient.FirewallAPI.AddResourceToGroup(context.Background(), groupId, resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService CreateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.CreateGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService CreateGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.FirewallAPI.CreateGroupRule(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		httpRes, err := apiClient.FirewallAPI.DeleteGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService DeleteGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string
		var ruleId string

		httpRes, err := apiClient.FirewallAPI.DeleteGroupRule(context.Background(), groupId, ruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService DeleteResourceFromGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string
		var resourceId string

		httpRes, err := apiClient.FirewallAPI.DeleteResourceFromGroup(context.Background(), groupId, resourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.FirewallAPI.GetGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetGroupResources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.FirewallAPI.GetGroupResources(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ruleId string
		var groupId string

		resp, httpRes, err := apiClient.FirewallAPI.GetGroupRule(context.Background(), ruleId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetGroupRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.FirewallAPI.GetGroupRules(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetRulesForResource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var resourceId string
		var resourceType ResourceType

		resp, httpRes, err := apiClient.FirewallAPI.GetRulesForResource(context.Background(), resourceId, resourceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService UpdateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.FirewallAPI.UpdateGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService UpdateGroupRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string
		var ruleId string

		resp, httpRes, err := apiClient.FirewallAPI.UpdateGroupRule(context.Background(), groupId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
