/*
Timeweb Cloud API

Testing FloatingIPAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_FloatingIPAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FloatingIPAPIService BindFloatingIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var floatingIpId string

		httpRes, err := apiClient.FloatingIPAPI.BindFloatingIp(context.Background(), floatingIpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FloatingIPAPIService CreateFloatingIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FloatingIPAPI.CreateFloatingIp(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FloatingIPAPIService DeleteFloatingIP", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var floatingIpId string

		httpRes, err := apiClient.FloatingIPAPI.DeleteFloatingIP(context.Background(), floatingIpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FloatingIPAPIService GetFloatingIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var floatingIpId string

		resp, httpRes, err := apiClient.FloatingIPAPI.GetFloatingIp(context.Background(), floatingIpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FloatingIPAPIService GetFloatingIps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FloatingIPAPI.GetFloatingIps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FloatingIPAPIService UnbindFloatingIp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var floatingIpId string

		httpRes, err := apiClient.FloatingIPAPI.UnbindFloatingIp(context.Background(), floatingIpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FloatingIPAPIService UpdateFloatingIP", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var floatingIpId string

		resp, httpRes, err := apiClient.FloatingIPAPI.UpdateFloatingIP(context.Background(), floatingIpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
