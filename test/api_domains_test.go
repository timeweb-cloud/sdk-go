/*
Timeweb Cloud API

Testing DomainsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_DomainsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DomainsAPIService AddDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		httpRes, err := apiClient.DomainsAPI.AddDomain(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService AddSubdomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string
		var subdomainFqdn string

		resp, httpRes, err := apiClient.DomainsAPI.AddSubdomain(context.Background(), fqdn, subdomainFqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService CheckDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.CheckDomain(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService CreateDomainDNSRecord", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.CreateDomainDNSRecord(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService CreateDomainRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainsAPI.CreateDomainRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService DeleteDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		httpRes, err := apiClient.DomainsAPI.DeleteDomain(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService DeleteDomainDNSRecord", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string
		var recordId int32

		httpRes, err := apiClient.DomainsAPI.DeleteDomainDNSRecord(context.Background(), fqdn, recordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService DeleteSubdomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string
		var subdomainFqdn string

		httpRes, err := apiClient.DomainsAPI.DeleteSubdomain(context.Background(), fqdn, subdomainFqdn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.GetDomain(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainDNSRecords", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainDNSRecords(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainDefaultDNSRecords", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainDefaultDNSRecords(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainNameServers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainNameServers(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId int32

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainRequest(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainRequests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomains", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainsAPI.GetDomains(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetTLD", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tldId int32

		resp, httpRes, err := apiClient.DomainsAPI.GetTLD(context.Background(), tldId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetTLDs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainsAPI.GetTLDs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService UpdateDomainAutoProlongation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.UpdateDomainAutoProlongation(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService UpdateDomainDNSRecord", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string
		var recordId int32

		resp, httpRes, err := apiClient.DomainsAPI.UpdateDomainDNSRecord(context.Background(), fqdn, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService UpdateDomainNameServers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fqdn string

		resp, httpRes, err := apiClient.DomainsAPI.UpdateDomainNameServers(context.Background(), fqdn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService UpdateDomainRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId int32

		resp, httpRes, err := apiClient.DomainsAPI.UpdateDomainRequest(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
