/*
Timeweb Cloud API

Testing APIKeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/timeweb-cloud/sdk-go"
)

func Test_openapi_APIKeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test APIKeysAPIService CreateToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIKeysAPI.CreateToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService DeleteToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string

		httpRes, err := apiClient.APIKeysAPI.DeleteToken(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService GetTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIKeysAPI.GetTokens(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService ReissueToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.APIKeysAPI.ReissueToken(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService UpdateToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.APIKeysAPI.UpdateToken(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
